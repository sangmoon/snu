/*  2010-12343 박상문	2016-2 database	project 1-1 */options{  static = true;  DEBUG_PARSER = false;  IGNORE_CASE = true;}PARSER_BEGIN(SimpleDBMSParser) public class SimpleDBMSParser{  public static final int PRINT_SYNTAX_ERROR = 0;  public static final int PRINT_CREATE_TABLE = 1;  public static final int PRINT_DROP_TABLE = 2;  public static final int PRINT_DESC = 3;  public static final int PRINT_SHOW_TABLES = 4;  public static final int PRINT_SELECT = 5;  public static final int PRINT_INSERT_INTO = 6;  public static final int PRINT_DELETE_FROM = 7;  public static void main(String args[]) throws ParseException  {    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);    System.out.print("DB_2016-12345> ");    while (true)    {      try      {        parser.command();      }      catch (Exception e)      {        printMessage(PRINT_SYNTAX_ERROR);        SimpleDBMSParser.ReInit(System.in);      }    }  }  public static void printMessage(int q)  {    switch(q)    {      case PRINT_SYNTAX_ERROR:      	System.out.println("Syntax error");      	break;      case PRINT_CREATE_TABLE:      	System.out.println("\'CREATE TABLE\' requested");      	break;      case PRINT_DROP_TABLE:      	System.out.println("\'DROP TABLE\' requested");      	break;      case PRINT_DESC:      	System.out.println("\'DESC\' requested");      	break;      case PRINT_SHOW_TABLES:      	System.out.println("\'SHOW TABLES\' requested");      	break;      case PRINT_SELECT:      	System.out.println("\'SELECT\' requested");      	break;      case PRINT_INSERT_INTO:      	System.out.println("\'INSERT INTO\' requested");      	break;      case PRINT_DELETE_FROM:      	System.out.println("\'DELETE FROM\' requested");      	break;    }    System.out.print("DB_2016-12345> ");  }}PARSER_END(SimpleDBMSParser)SKIP : { " " | "\r" | "\t" | "\n" }TOKEN : /* Keywords */{  < EXIT : "exit" >| < INT : "int" >| < CHAR : "char" >| < DATE : "date" >| < CREATE_TABLE : "create table" >| < NOT_NULL : "not null" >| < PRIMARY_KEY : "primary key" >| < FOREIGN_KEY : "foreign key" >| < REFERENCES : "references" >| < DROP_TABLE : "drop table" >| < DESC : "desc" >| < SHOW_TABLES : "show tables" >| < SELECT : "select" >| < FROM : "from" >| < WHERE : "where" >| < AS : "as" >| < OR : "or" >| < AND : "and" >| < NOT : "not" >| < IS : "is">| < NULL : "null">| < INSERT_INTO: "insert into">| < DELETE_FROM: "delete from">| < VALUES: "values" >}TOKEN :{  < SEMICOLON : ";" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < COMMA : "," >| < UNDERSCORE : "_" >| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>| < SIGN : "+" | "-" >| < DIGIT : [ "0"-"9" ] >| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >| < ALPHABET : [ "a"-"z", "A"-"Z" ] >| < WILD_CARD : "*" >| < PERIOD : ".">| < EQ : "=">| < BG : ">">| < LT : "<">| < BE : ">=">| < LE : "<=">| < NE : "!=">| < CHAR_STRING : < QUOTE >(< NON_QUOTE_CHARACTER>)*< QUOTE> >| < QUOTE : "\'"|"\"">| < DATE_VALUE : < NNNN >"-"< NN >"-"< NN >>| < NNNN : < DIGIT>< DIGIT>< DIGIT>< DIGIT>>| < NN : < DIGIT>< DIGIT>>| < NON_QUOTE_CHARACTER : < DIGIT>|< ALPHABET>|< NON_QUOTE_SPECIAL_CHARACTER>|" ">| < NON_QUOTE_SPECIAL_CHARACTER : "~"|"!"|"@"|"#"|"$"|"%"|"^"|"&"|"*"|"("|")"|"-"	| "_"|"+"|"="|";"|":"|","|"<"|" >"|"."|"/"|"?"|"|"|"\\" >}void command() :{}{  queryList()| (    < EXIT >    < SEMICOLON >    {      System.exit(0);    }  ) }void queryList() :{  int q;}{  (    q = query()    < SEMICOLON >    {      printMessage(q);    }  )+}int query() :{  int q;}{  createTableQuery()  {    q=PRINT_CREATE_TABLE;  }  (    {      return q;    }  )| dropTableQuery()  {    q=PRINT_DROP_TABLE;  }  (    {      return q;    }  )| descQuery()	{	  q = PRINT_DESC;	}	(	  {	    return q;	  }	)| showTablesQuery()	{	  q = PRINT_SHOW_TABLES;	}	(	  {	    return q;	  }	)| selectQuery()	{	  q = PRINT_SELECT;	}	(	  {	    return q;	  }	)| insertIntoQuery()	{	  q = PRINT_INSERT_INTO;	}	(	  {	    return q;	  }	)| deleteFromQuery()	{	  q = PRINT_DELETE_FROM;	}	(	  {	    return q;	  }	)}void createTableQuery() :{}{  < CREATE_TABLE >  tableName()  tableElementList()}/* drop table*/void dropTableQuery():{}{  < DROP_TABLE >  tableName()}/* desc table */void descQuery():{}{  < DESC >  tableName()}/* show table */void showTablesQuery():{}{  < SHOW_TABLES >}/* select table*/void selectQuery():{}{  < SELECT >  selectList()  tableExpression()}void selectList():{}{  < WILD_CARD >	| selectedColumn()(< COMMA >selectedColumn())* }void selectedColumn():{}{    (LOOKAHEAD(2)    tableName() < PERIOD >)? columnName() (< AS > columnName())?}void tableExpression():{}{  fromClause()(whereClause())?}void fromClause():{}{  < FROM >tableReferenceList()}void tableReferenceList():{}{  referedTable()(< COMMA >referedTable())*}void referedTable():{}{  tableName()(< AS >tableName())?}void whereClause():{}{  < WHERE >booleanValueExpression()}void booleanValueExpression():{}{  booleanTerm()(< OR >booleanTerm())*}void booleanTerm():{}{  booleanFactor()(< AND > booleanFactor())*}void booleanFactor():{}{  (< NOT >)?booleanTest()}void booleanTest():{}{  predicate()	| parenthesizedBooleanExpression() }void parenthesizedBooleanExpression():{}{  < LEFT_PAREN > booleanValueExpression() < RIGHT_PAREN >}void predicate():{}{  LOOKAHEAD(3)  comparisonPredicate()	| nullPredicate() }void comparisonPredicate():{}{  compOperand() compOp() compOperand()}  void compOperand():{}{  comparableValue() | (LOOKAHEAD(2)tableName()< PERIOD >)?columnName()}void compOp():{}{  < EQ >| < BG >| < LT >| < BE >| < LE >| < NE >}void comparableValue():{}{  < INT_VALUE >	| < CHAR_STRING >	| < DATE_VALUE > }void nullPredicate():{}{  (LOOKAHEAD(2)    tableName()< PERIOD >)?columnName()nullOperation()}void nullOperation():{}{	< IS > (< NOT >)? < NULL> }/* insert query */void insertIntoQuery():{}{  < INSERT_INTO >tableName()insertColumnsAndSource()}void insertColumnsAndSource():{}{  (columnNameList())?valueList()}void valueList():{}{  < VALUES >< LEFT_PAREN>value()(< COMMA>value())*< RIGHT_PAREN>}void value():{}{  < NULL> | comparableValue()}/* delete query */void deleteFromQuery():{}{  < DELETE_FROM>tableName()(whereClause())?}void tableElementList() :{}{  < LEFT_PAREN >  tableElement()  (    < COMMA >    tableElement()  )*  < RIGHT_PAREN >}void tableElement() :{}{  columnDefinition()| tableConstraintDefinition()}void columnDefinition() :{}{  columnName()  dataType()  (    < NOT_NULL >  )?}void tableConstraintDefinition() :{}{  primaryKeyConstraint()| referentialConstraint()}void primaryKeyConstraint() :{}{  < PRIMARY_KEY >  columnNameList()}void referentialConstraint() :{}{  < FOREIGN_KEY >  columnNameList()  < REFERENCES >  tableName()  columnNameList()}void columnNameList() :{}{  < LEFT_PAREN >  columnName()  (    < COMMA >    columnName()  )*  < RIGHT_PAREN >}void dataType() :{}{  < INT >| (    < CHAR >    < LEFT_PAREN >    < INT_VALUE >    < RIGHT_PAREN >  )| < DATE >}void tableName() :{}{  < LEGAL_IDENTIFIER >}void columnName() :{}{  < LEGAL_IDENTIFIER >}